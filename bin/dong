#!/usr/bin/env node

'use strict';

// check update first
require('update-notifier')({
  pkg: require('../package.json')
}).notify({
  defer: false
});

var chalk = require('chalk')

var commander = require('commander')

process.on('exit', function() {
  if (process.argv.length === 2) {
    console.log(chalk.cyan('        ___                 '))
    console.log(chalk.cyan('    ____/ /___  ____  ____  '))
    console.log(chalk.cyan('   / __  / __ \\/ __ \\/ __ \\ '))
    console.log(chalk.cyan('  / /_/ / /_/ / / / / /_/ / '))
    console.log(chalk.cyan('  \\____/\\____/_/ /_/\\__, /  '))
    console.log(chalk.cyan('                   /____/   '))
    console.log('')
    console.log('  Version: ' + commander.version())
    commander.help()
  }
})

commander
  // version
  .version(require('../package').version, '-v, --version')
  // usage
  .usage('<command> [options]')

// init
commander
  .command('init')
  .description('初始化项目文件')
  .allowUnknownOption(true)
  .option('-f, --force', '直接覆盖，不做目录非空校验')
  .action(function(type, options) {
    if (!options) {
      options = type
      type = undefined
    }
    require('dong-init')({
      type: type || 'spa',
      force: options.force
    })
  })
  .on('--help', function(){
    console.log('  Examples:')
    console.log('')
    console.log(chalk.gray('    $ ') +
                chalk.magenta('dong init spa') +
                chalk.gray(' ....... Single Page Application'))
    console.log(chalk.gray('    $ ') +
                chalk.magenta('dong init web') +
                chalk.gray(' ....... General Web Project'))
    console.log('')
  })

// patch
commander
  .command('patch')
  .description('给 SPM 打补丁')
  .allowUnknownOption(true)
  .option('-f, --force', '直接打补丁，不校验是否已打补丁')
  .option('-r, --registry', '自定义 NPM 源，如 `https://registry.npm.taobao.org`')
  .action(function(type, options) {
    if (!options) {
      options = type
      type = undefined
    }
    require('dong-patch')({
      type: type || 'manual',
      force: options.force,
      registry: options.registry
    })
  })

// build
commander
  .command('build')
  .description('静态文件构建，包括资源哈希值生成')
  .allowUnknownOption(true)
  .option('-r, --root <root>', 'Web 服务根目录，默认 `.`')
  .option('-v, --views <views>', '视图文件，默认服务根目录下的 `*.html`')
  .option('-f, --force', '先清空输出目录')
  .option('-d, --debug', 'DEBUG, 仅生成 `config.js`')
  .action(function(type, options) {
    if (!options) {
      options = type
      type = undefined
    }
    require('dong-build')({
      type: type || 'spa',
      root: options.root,
      views: options.views,
      force: options.force,
      debug: options.debug
    })
  })
  .on('--help', function(){
    console.log('  Examples:')
    console.log('')
    console.log(chalk.gray('    $ ') +
                chalk.magenta('dong build spa') +
                chalk.gray(' ....... Single Page Application'))
    console.log(chalk.gray('    $ ') +
                chalk.magenta('dong build web') +
                chalk.gray(' ....... General Web Project'))
    console.log('')
  })

// serve
commander
  .command('serve')
  .description('启动 Web 服务')
  .allowUnknownOption(true)
  .option('-r, --root <root>', 'Web 服务根目录，默认 `.`')
  .option('-H, --host <host>', '服务域名，默认 `127.0.0.1`')
  .option('-p, --port <port>', '监听端口，默认 `9527`')
  .option('-m, --mock <mock>', '接口模拟数据路径，默认 `api`')
  .option('-o, --open', '自动在浏览器打开，默认 `false`')
  .option('-d, --debug', '显示 DEBUG 信息，默认 `false`')
  .action(function() {
    require('dong-serve')({
      root: this.root,
      host: this.host,
      port: this.port,
      mock: this.mock,
      open: this.open,
      debug: this.debug
    })
  })

commander.parse(process.argv)
